package com.servicesrest.restdata.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import org.springframework.stereotype.Controller;

import com.servicesrest.restdata.model.*;

@Controller
@RequestMapping(path="/ServicesREST")
public class EmpleadoController {
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private EmpleadoRepository empleadoRepository;
	
	//Obtener empleados con formato JSON
	@GetMapping(path="/empleados")
	public @ResponseBody Iterable<Empleado> getAllUsers() {
		return empleadoRepository.findAll();
	}
	
	//Consultar empleado por medio de id
	@GetMapping(value = "/empleado/{idEmpleado}")
	@ApiOperation(value = "Consulta el detalle de un empleado", notes = "Permite consultar el nombre, apellido y celuar.")    
	public @ResponseBody Empleado consultarEmpleado(@ApiParam(value = "Identificador del empleado", required=false) @PathVariable Long idEmpleado) {
		return empleadoRepository.findOne(idEmpleado);
	}

	//Agregar empleado
	@PostMapping(value = "/crearEmpleado")
    public Empleado crearEmpleado(@RequestBody Empleado Empleado) {
        return empleadoRepository.save(Empleado);
    }

	//Actualizar empleado
    @PutMapping(value = "/actualizarEmpleado")
    public Empleado actualizarEmpleado(@RequestBody Empleado Empleado) {
        Empleado EmpleadoBD = empleadoRepository.findOne(Empleado.getId());       
        EmpleadoBD.setAllEmpleado(Empleado.getNombre(), Empleado.getApellido(), Empleado.getTelefono());
        return empleadoRepository.save(EmpleadoBD);
    }
	
    //Borrar empleado
    @DeleteMapping(value = "/eliminarEmpleado/{idEmpleado}")
    public @ResponseBody Empleado eliminarEmpleado(@PathVariable final Long idEmpleado) {
        Empleado EmpleadoBD = empleadoRepository.findOne(idEmpleado);
        if (EmpleadoBD != null) {
            empleadoRepository.delete(idEmpleado);
        }
        return EmpleadoBD;
    }
	
}
